// Generated by Dagger (https://dagger.dev).
package com.okankkl.movieapp.di;

import com.okankkl.movieapp.data.local.room.database.MovieDao;
import com.okankkl.movieapp.data.remote.MovieApi;
import com.okankkl.movieapp.domain.repository.MovieRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AppModule_ProvideMovieRepositoryFactory implements Factory<MovieRepository> {
  private final AppModule module;

  private final Provider<MovieApi> movieApiProvider;

  private final Provider<MovieDao> movieDaoProvider;

  public AppModule_ProvideMovieRepositoryFactory(AppModule module,
      Provider<MovieApi> movieApiProvider, Provider<MovieDao> movieDaoProvider) {
    this.module = module;
    this.movieApiProvider = movieApiProvider;
    this.movieDaoProvider = movieDaoProvider;
  }

  @Override
  public MovieRepository get() {
    return provideMovieRepository(module, movieApiProvider.get(), movieDaoProvider.get());
  }

  public static AppModule_ProvideMovieRepositoryFactory create(AppModule module,
      Provider<MovieApi> movieApiProvider, Provider<MovieDao> movieDaoProvider) {
    return new AppModule_ProvideMovieRepositoryFactory(module, movieApiProvider, movieDaoProvider);
  }

  public static MovieRepository provideMovieRepository(AppModule instance, MovieApi movieApi,
      MovieDao movieDao) {
    return Preconditions.checkNotNullFromProvides(instance.provideMovieRepository(movieApi, movieDao));
  }
}
