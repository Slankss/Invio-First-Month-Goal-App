// Generated by Dagger (https://dagger.dev).
package com.okankkl.movieapp.di;

import com.okankkl.movieapp.domain.repository.MovieRepository;
import com.okankkl.movieapp.domain.use_case.GetMoviesUsecase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AppModule_ProvideGetMoviesUsecaseFactory implements Factory<GetMoviesUsecase> {
  private final AppModule module;

  private final Provider<MovieRepository> movieRepositoryProvider;

  public AppModule_ProvideGetMoviesUsecaseFactory(AppModule module,
      Provider<MovieRepository> movieRepositoryProvider) {
    this.module = module;
    this.movieRepositoryProvider = movieRepositoryProvider;
  }

  @Override
  public GetMoviesUsecase get() {
    return provideGetMoviesUsecase(module, movieRepositoryProvider.get());
  }

  public static AppModule_ProvideGetMoviesUsecaseFactory create(AppModule module,
      Provider<MovieRepository> movieRepositoryProvider) {
    return new AppModule_ProvideGetMoviesUsecaseFactory(module, movieRepositoryProvider);
  }

  public static GetMoviesUsecase provideGetMoviesUsecase(AppModule instance,
      MovieRepository movieRepository) {
    return Preconditions.checkNotNullFromProvides(instance.provideGetMoviesUsecase(movieRepository));
  }
}
